<%-
  style            ||= 'song'
  classname        ||= ''
  cover            ||= 'icon'
  station          ||= Station.fake_station
  per                = Yetting.per
  page               = (params[:p] || 1).to_i
  id               ||= station.id
  page_request     ||= false
  already_limited  ||= false
  dont_paginate    ||= false
  dont_find_listen ||= false
  nocache          ||= false
  single           ||= false
  has_title        ||= false
  listen_song        = params[:listen_song_id]
  reviews          ||= nil
  cache_val        ||= nil
  id_page            = "#{id}-#{page}"
  do_cache           = id > 5 and !nocache
  cache              = cache_key(['v5', id, station.updated_at.to_i, page, per, already_limited, page_request, classname, cache_val, style])

  if !single
    paginate         = (paginate == false || style == 'mini') ? false : true
    songs          ||= station.songs.playlist_broadcasted
    total_pages      = page + 1 # trick for non-paginate capable

    if !page_request and !already_limited
      total_songs = songs.count
      total_pages = total_songs / per + ((total_songs % per > 0) ? 1 : 0)
      has_more = page < total_pages
    else
      has_more = songs.size >= per
    end

    if listen_song and !dont_find_listen
      songs = Song.song_page(songs, listen_song.to_i) unless already_limited
    else
      songs = songs.limit_page(page) unless already_limited or page_request
    end
  end
-%>

<%- if !single and !page_request and !already_limited and !dont_paginate and total_pages > 1
      path = request.fullpath.gsub(/(\?|\/p-[0-9]+).*/, '')
      path = '' if path == '/'
      between = 4
      min = [page - between, 2].max
      max = [page + between, total_pages].min
      # max += [between - min, 0].max
      more_high = (page + between) < total_pages
  -%>
  <div class="pagination">
    <h5>Pages:</h5>
    <div class="table-wrap">
      <table>
        <tr>
          <% if page != 1 %><td><%= link_to "1", "#{path}/" %></td><% end %>
          <% if page > between + 2 %><td class="page-sep">...</td><% end %>
          <% min.upto(page - 1).each do |curpage| -%>
            <td><%= link_to "#{curpage}", "#{path}/p-#{curpage}" %></td>
          <% end -%>
          <td class="page-current"><span><%= page %></span></td>
          <% if total_pages
              (page+1).upto(max).each do |curpage| -%>
                <td><%= link_to "#{curpage}", "#{path}/p-#{curpage}" %></td>
          <% end -%>
          <% if more_high -%>
            <td class="page-sep">...</td>
            <td><%= link_to total_pages, "#{path}/p-#{total_pages}" %></td>
          <% end -%>
        <% end -%>
        </tr>
      </table>
    </div>
  </div>
<%- end -%>

<%- cache_if(do_cache, cache) do -%>
  <div id="playlist-<%= id_page %>" class="playlist playlist-<%= style %> not-loaded <%= classname %> <%= 'has-more' if has_more %> <%= 'has-title' if has_title %>" data-key="<%= cache %>"
    data-page="<%= page %>" data-playlist="{&quot;station&quot;: {&quot;id&quot;:&quot;<%= id_page %>&quot;,&quot;title&quot;:&quot;<%= station.title %>&quot;,&quot;slug&quot;:&quot;<%= station.slug %>&quot;},&quot;songs&quot;: <%= songs.to_a.to_playlist %>}">
    <%= render partial: "songs/#{style}", collection: songs, locals: { station_id: id, page: page, cover: cover, partial: page_request, single: single, reviews: reviews, has_title: has_title } unless songs.nil? %>
  </div>
<%- end -%>

<%= link_to 'Next Page', '', :class => 'next-page control' if has_more and !dont_paginate %>

<%-
  # update non-cached values
  # broadcasts, follows, listens, counts

  if user_signed_in?
    ids = songs.map(&:matching_id)
    stations = songs.map(&:station_id)
    stations = stations | songs.map(&:following_station_id) if songs.first.respond_to? :following_station_id
    broadcasts = current_user.get_song_broadcasts(ids) || []
    follows = current_user.get_station_follows(stations) || []
    friend_broadcasts = current_user.get_friend_broadcasts(ids)
    listens = {}
    current_user.get_song_listens(songs: ids, url: request.fullpath).each { |l| listens[l.song_id] = l.shortcode }
  end

  broadcasts_count = {}
  songs.each { |s| broadcasts_count[s.matching_id] = s.user_broadcasts_count }
-%>

<script type="text/javascript">
  <%- if user_signed_in? -%>
  broadcastedIds['<%= id_page %>'] = <%= raw broadcasts %>;
  updateBroadcastsIds = broadcastedIds['<%= id_page %>'];
  updateFollowsIds.push(<%= raw follows %>);
  updateListensIds = <%= raw listens.to_json %>;
  updateFriendBroadcastIds = <%= raw friend_broadcasts.to_json %>;
  <%- end -%>
  updateBroadcastsCounts = <%= raw broadcasts_count.to_json %>;
</script>